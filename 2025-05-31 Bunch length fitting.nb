(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    233801,       4515]
NotebookOptionsPosition[    231389,       4465]
NotebookOutlinePosition[    231788,       4481]
CellTagsIndexPosition[    231745,       4478]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"TransformedDistribution", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"\[Sigma]Screen", "*", "\[Sigma]Screen"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[Sigma]Screen", "\[Distributed]", 
      RowBox[{"NormalDistribution", "[", 
       RowBox[{"\[Mu]\[Sigma]Screen", ",", "\[Sigma]\[Sigma]Screen"}], 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\[Sigma]Off", "\[Distributed]", 
      RowBox[{"NormalDistribution", "[", 
       RowBox[{"\[Mu]\[Sigma]Off", ",", "\[Sigma]\[Sigma]Off"}], "]"}]}]}], 
    "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.957699393783395*^9, 3.957699499829052*^9}, {
  3.957701443962543*^9, 3.95770146100517*^9}},
 CellLabel->
  "In[2365]:=",ExpressionUUID->"5c28327a-b7e9-44d4-83e5-88843c3046cf"],

Cell[BoxData[
 RowBox[{"TransformedDistribution", "[", 
  RowBox[{
   SuperscriptBox["\[FormalX]1", "2"], ",", 
   RowBox[{
    RowBox[{"{", "\[FormalX]1", "}"}], "\[Distributed]", 
    RowBox[{"TransformedDistribution", "[", 
     RowBox[{
      RowBox[{"{", "\[FormalX]", "}"}], ",", 
      RowBox[{"\[FormalX]", "\[Distributed]", 
       RowBox[{"NormalDistribution", "[", 
        RowBox[{"\[Mu]\[Sigma]Screen", ",", "\[Sigma]\[Sigma]Screen"}], 
        "]"}]}]}], "]"}]}]}], "]"}]], "Output",
 CellChangeTimes->{{3.957699494301054*^9, 3.957699500048833*^9}, {
   3.9577014445496283`*^9, 3.957701461549238*^9}, 3.9577039226504517`*^9, {
   3.9577041986011868`*^9, 3.957704257394475*^9}, {3.95770445839511*^9, 
   3.957704488486944*^9}, 3.957705168978681*^9},
 CellLabel->
  "Out[2365]=",ExpressionUUID->"f3f34146-1980-4a41-b103-2380cb27ad08"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"data", " ", "=", 
    RowBox[{"ImportString", "[", 
     RowBox[{"\"\< -1, 0.001463870524947474\n 0, 0.00047288595738029726\n 1, \
0.0015314520018408838\n -1, 0.0015990216946601093\n 0, 0.000488025717938945\n \
1, 0.001702715083358308\n -1, 0.0015840824570475\n 0, 0.0004415050596621244\n \
1, 0.0016658283063040557\n -1, 0.001981712299712555\n 0, \
0.0005222530245381091\n 1, 0.0017697200301395532\n -1, 0.0014666899862966108\n\
 0, 0.00045537560463279814\n 1, 0.0018473205035243142\n -1, \
0.0013760208707809464\n 0, 0.0004859513693057428\n 1, 0.00173260856250911\n \
-1, 0.002051708016449268\n 0, 0.0004954909340642246\n 1, \
0.0010361132520943922\n -1, 0.0019271012186153709\n 0, 0.0004533206230957517\n\
 1, 0.001938710604969935\n -1, 0.0017277901577373476\n 0, \
0.00048823842599653476\n 1, 0.0015677181790459992\n -1, 0.0017144755734529442\
\n 0, 0.0004857739148630236\n 1, 0.001810528644912713\n\>\"", 
      ",", "\"\<CSV\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"data", "=", 
     RowBox[{"data", "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", "6"}], "]"}], "]"}]}], ";"}], "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Convert", " ", "to", " ", "microns"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "2"}], "]"}], "]"}], "*=", 
   SuperscriptBox["10", "6"]}], ";"}]}], "Input",
 CellChangeTimes->{{3.957704455750102*^9, 3.957704487839951*^9}, 
   3.957705168310978*^9},
 CellLabel->
  "In[2366]:=",ExpressionUUID->"4a3a60fb-72da-4c8f-ae61-1f421145749c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"expr\[Sigma]Screen", " ", "=", " ", 
   RowBox[{
    SqrtBox[
     RowBox[{
      SuperscriptBox["\[Sigma]Off", "2"], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Kappa]", " ", "V", " ", "\[Sigma]z"}], ")"}], "2"]}]], "/.", 
    RowBox[{"\[Kappa]", "->", 
     RowBox[{"(", 
      RowBox[{"1", "/", "0.073"}], ")"}]}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"nlm", " ", "=", " ", 
  RowBox[{"NonlinearModelFit", "[", "\[IndentingNewLine]", 
   RowBox[{
   "data", ",", "\[IndentingNewLine]", "expr\[Sigma]Screen", ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"\[Sigma]Off", ",", "\[Sigma]z"}], "}"}], ",", 
    "\[IndentingNewLine]", "V"}], "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.957697430307851*^9, 3.957697468658025*^9}, {
   3.95769760472867*^9, 3.9576976479425173`*^9}, {3.9576976795195627`*^9, 
   3.957697702824416*^9}, {3.957703715061554*^9, 3.957703733274262*^9}, {
   3.95770378488793*^9, 3.957703801047431*^9}, {3.9577038714266357`*^9, 
   3.9577038904199057`*^9}, 3.957703921496933*^9, {3.957704197353528*^9, 
   3.957704256424344*^9}, {3.957704295284889*^9, 3.95770430172202*^9}},
 CellLabel->
  "In[2368]:=",ExpressionUUID->"f4076314-d383-4b9c-8f9e-8f726f3672ef"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["FittedModel",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               TagBox[
                TagBox[
                 SqrtBox[
                  RowBox[{"229328.03040465055`", "\[VeryThinSpace]", "+", 
                    RowBox[{"2.5754910121913673`*^6", " ", 
                    SuperscriptBox["V", "2"]}]}]], Short], "SummaryItem"]}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            GridBox[{{
               TagBox[
                TagBox[
                 SqrtBox[
                  RowBox[{
                    RowBox[{"229328.03040465055`", "\[VeryThinSpace]"}], "+", 
                    
                    RowBox[{"2.5754910121913673`*^6", " ", 
                    SuperscriptBox["V", "2"]}]}]], Short], "SummaryItem"]}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  FittedModel[<|
   "Type" -> "Nonlinear", 
    "Model" -> <|
     "FittedParameterRules" -> {$CellContext`\[Sigma]Off -> 
        478.88206314775516`, $CellContext`\[Sigma]z -> 117.15285572263186`}, 
      "IndependentVariables" -> {$CellContext`V}, 
      "FitExpression" -> ($CellContext`\[Sigma]Off^2 + 
        187.65246762994937` $CellContext`V^2 $CellContext`\[Sigma]z^2)^
       Rational[1, 2], "ParameterConstraints" -> True|>, 
    "Weights" -> <|"ExampleWeights" -> 1|>, 
    "InputData" -> {{-1, 1463.870524947474}, {0, 472.88595738029727`}, {
      1, 1531.4520018408837`}, {-1, 1599.0216946601092`}, {
      0, 488.025717938945}, {1, 1702.715083358308}, {-1, 1584.0824570475}, {
      0, 441.5050596621244}, {
      1, 1665.8283063040558`}, {-1, 1981.7122997125553`}, {
      0, 522.2530245381091}, {
      1, 1769.7200301395533`}, {-1, 1466.6899862966109`}, {
      0, 455.3756046327982}, {
      1, 1847.3205035243143`}, {-1, 1376.0208707809463`}, {
      0, 485.95136930574284`}, {
      1, 1732.60856250911}, {-1, 2051.7080164492677`}, {
      0, 495.49093406422463`}, {
      1, 1036.1132520943922`}, {-1, 1927.101218615371}, {
      0, 453.3206230957517}, {
      1, 1938.710604969935}, {-1, 1727.7901577373475`}, {
      0, 488.2384259965348}, {
      1, 1567.7181790459992`}, {-1, 1714.4755734529442`}, {
      0, 485.7739148630236}, {1, 1810.528644912713}}, "Localizer" -> 
    Function[Null, 
      Internal`LocalizedBlock[{$CellContext`V, $CellContext`\[Sigma]Off, \
$CellContext`\[Sigma]z}, #], {HoldAll}], "Options" -> {}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.957697699826095*^9, 3.9576977224264803`*^9}, {
   3.957703719322228*^9, 3.9577037337104607`*^9}, {3.957703788664515*^9, 
   3.957703801411645*^9}, 3.957703891804179*^9, 3.9577039226911097`*^9, {
   3.957704198657222*^9, 3.957704257449295*^9}, {3.957704458450616*^9, 
   3.957704488530117*^9}, 3.957705169056018*^9},
 CellLabel->
  "Out[2369]=",ExpressionUUID->"c6904844-8fad-4a5f-8bef-38ce1ad1b5b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"aroundData", " ", "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"Around", "[", 
     RowBox[{"#", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], "&"}], "/@", 
   RowBox[{"GroupBy", "[", 
    RowBox[{"data", ",", "First"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.957704303721307*^9, 3.957704378076586*^9}},
 CellLabel->
  "In[2370]:=",ExpressionUUID->"b2cbb7d1-a9d0-4732-b69e-0f590f6f799e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "1"}], "\[Rule]", 
    InterpretationBox[
     TemplateBox[{"1689.", "234."},
      "Around"],
     Around[1689.2472799700124`, 234.1052944296365]]}], ",", 
   RowBox[{"0", "\[Rule]", 
    InterpretationBox[
     TemplateBox[{"479.", "24."},
      "Around"],
     Around[478.88206314775516`, 23.721649808536505`]]}], ",", 
   RowBox[{"1", "\[Rule]", 
    InterpretationBox[
     TemplateBox[{"1660.", "251."},
      "Around"],
     Around[1660.2715168699265`, 251.4117783137951]]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.9577043204773493`*^9, 3.957704378405196*^9}, {
   3.957704458469473*^9, 3.957704488545187*^9}, 3.957705169064611*^9},
 CellLabel->
  "Out[2370]=",ExpressionUUID->"db1cb8f7-b0d8-45ba-9e66-b56a9ec00237"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{"aroundData", ",", 
     RowBox[{"ImageSize", "->", "800"}], ",", 
     RowBox[{"Frame", "->", "True"}], ",", 
     RowBox[{"LabelStyle", "->", "20"}], ",", 
     RowBox[{"FrameLabel", "->", 
      RowBox[{"{", 
       RowBox[{"\"\<TCAV3 scaled amplitude\>\"", ",", 
        " ", "\"\<PR15944 \!\(\*SubscriptBox[\(SIIS90\), \(y\)]\) \
[\[Mu]m]\>\""}], "}"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"nlm", "[", "\"\<BestFit\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"V", ",", 
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
     RowBox[{"PlotStyle", "->", "Red"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.957703804166243*^9, 3.957703835195018*^9}, {
  3.957703901889892*^9, 3.9577039091955957`*^9}, {3.957704032379715*^9, 
  3.957704086195477*^9}, {3.957704385682705*^9, 3.9577044035361958`*^9}},
 CellLabel->
  "In[2371]:=",ExpressionUUID->"0d6f2a76-6ffb-4b46-996f-e20b589083a5"],

Cell[BoxData[
 GraphicsBox[{{{{
      {RGBColor[0.24, 0.6, 0.8], 
       StyleBox[{{}, {
          LineBox[{{-1., 1455.141985540376}, {-1., 1689.2472799700124`}}], 
          LineBox[{{-1., 1689.2472799700124`}, {-1., 1923.3525743996488`}}]}},
        
        Antialiasing->False]}, 
      {RGBColor[0.24, 0.6, 0.8], 
       StyleBox[{{}, {
          LineBox[{{0., 455.1604133392187}, {0., 478.88206314775516`}}], 
          LineBox[{{0., 478.88206314775516`}, {0., 502.60371295629164`}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.24, 0.6, 0.8], 
       StyleBox[{{}, {
          LineBox[{{1., 1408.8597385561313`}, {1., 1660.2715168699265`}}], 
          LineBox[{{1., 1660.2715168699265`}, {1., 1911.6832951837216`}}]}},
        Antialiasing->False]}}, {
      {RGBColor[0.24, 0.6, 0.8], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{-1., 1923.3525743996488`}, 
             Offset[{3, 0}, {-1., 1923.3525743996488`}]}, {{-1., 
             1923.3525743996488`}, 
             Offset[{-3, 0}, {-1., 1923.3525743996488`}]}, {{-1., 
             1455.141985540376}, 
             Offset[{3, 0}, {-1., 1455.141985540376}]}, {{-1., 
             1455.141985540376}, 
             Offset[{-3, 0}, {-1., 1455.141985540376}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.24, 0.6, 0.8], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0., 502.60371295629164`}, 
             Offset[{3, 0}, {0., 502.60371295629164`}]}, {{0., 
             502.60371295629164`}, 
             Offset[{-3, 0}, {0., 502.60371295629164`}]}, {{0., 
             455.1604133392187}, Offset[{3, 0}, {0., 455.1604133392187}]}, {{
             0., 455.1604133392187}, 
             Offset[{-3, 0}, {0., 455.1604133392187}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.24, 0.6, 0.8], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{1., 1911.6832951837216`}, 
             Offset[{3, 0}, {1., 1911.6832951837216`}]}, {{1., 
             1911.6832951837216`}, 
             Offset[{-3, 0}, {1., 1911.6832951837216`}]}, {{1., 
             1408.8597385561313`}, 
             Offset[{3, 0}, {1., 1408.8597385561313`}]}, {{1., 
             1408.8597385561313`}, 
             Offset[{-3, 0}, {1., 1408.8597385561313`}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}]},
        Antialiasing->False]}}}, 
    InterpretationBox[{
      TagBox[
       TagBox[
        {RGBColor[0.24, 0.6, 0.8], PointSize[0.012833333333333334`], 
         AbsoluteThickness[2], 
         PointBox[{{-1., 1689.2472799700124`}, {0., 478.88206314775516`}, {1.,
           1660.2715168699265`}}]},
        Annotation[#, "Charting`Private`Tag#1"]& ],
       {"WolframDynamicHighlight", <|
        "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>}], 
      StyleBox[
       DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
         Slot["HighlightElements"], 
         Slot["LayoutOptions"], 
         Slot["Meta"], 
         Charting`HighlightActionFunction["DynamicHighlight", {{
            Annotation[{
              Directive[
               PointSize[0.012833333333333334`], 
               RGBColor[0.24, 0.6, 0.8], 
               AbsoluteThickness[2]], 
              
              Point[{{-1., 1689.2472799700124`}, {0., 478.88206314775516`}, {
               1., 1660.2715168699265`}}]}, "Charting`Private`Tag#1"]}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, 
             "PlotRange" -> {{-1., 1.}, {0, 1923.3525743996488`}}, 
             "Frame" -> {{True, True}, {True, True}}, "AxesOrigin" -> {0, 0}, 
             "ImageSize" -> {800, 800/GoldenRatio}, "Axes" -> {True, True}, 
             "LabelStyle" -> {FontSize -> 20}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                PointSize[0.012833333333333334`], 
                RGBColor[0.24, 0.6, 0.8], 
                AbsoluteThickness[2]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 (Identity[#]& )[
                  Part[#, 1]], 
                 (Identity[#]& )[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListPlot, "GroupHighlight" -> False|>|>]]& )[<|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{-1., 1.}, {0, 1923.3525743996488`}}, 
            "Frame" -> {{True, True}, {True, True}}, "AxesOrigin" -> {0, 0}, 
            "ImageSize" -> {800, 800/GoldenRatio}, "Axes" -> {True, True}, 
            "LabelStyle" -> {FontSize -> 20}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[0.012833333333333334`], 
               RGBColor[0.24, 0.6, 0.8], 
               AbsoluteThickness[2]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListPlot, "GroupHighlight" -> False|>|>],
        ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
         4.503599627370496*^15, -4.503599627370496*^15}}],
       Selectable->False]},
     Annotation[{{
        Annotation[{
          Directive[
           PointSize[0.012833333333333334`], 
           RGBColor[0.24, 0.6, 0.8], 
           AbsoluteThickness[2]], 
          
          Point[{{-1., 1689.2472799700124`}, {0., 478.88206314775516`}, {1., 
           1660.2715168699265`}}]}, "Charting`Private`Tag#1"]}}, <|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
       "LayoutOptions" -> <|
        "PanelPlotLayout" -> <||>, 
         "PlotRange" -> {{-1., 1.}, {0, 1923.3525743996488`}}, 
         "Frame" -> {{True, True}, {True, True}}, "AxesOrigin" -> {0, 0}, 
         "ImageSize" -> {800, 800/GoldenRatio}, "Axes" -> {True, True}, 
         "LabelStyle" -> {FontSize -> 20}, "AspectRatio" -> GoldenRatio^(-1), 
         "DefaultStyle" -> {
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.24, 0.6, 0.8], 
            AbsoluteThickness[2]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         ListPlot, "GroupHighlight" -> False|>|>, 
      "DynamicHighlight"]], {{}, {}}}, 
   InterpretationBox[{
     TagBox[{{{}, {}, 
        TagBox[
         {RGBColor[1, 0, 0], AbsoluteThickness[2], Opacity[1.], 
          LineBox[CompressedData["
1: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
/f+++h9Yvl20
           "]]},
         Annotation[#, "Charting`Private`Tag#1"]& ]}, {}},
      {"WolframDynamicHighlight", <|
       "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
     StyleBox[
      DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
        Slot["HighlightElements"], 
        Slot["LayoutOptions"], 
        Slot["Meta"], 
        Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
            Annotation[{
              Directive[
               Opacity[1.], 
               AbsoluteThickness[2], 
               RGBColor[1, 0, 0]], 
              Line[CompressedData["
1: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
/f+++h9Yvl20
               "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{-1, 1}, {478.88212686336885`, 
              1674.7593356515013`}}, 
            "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 478.88212686336993`}, 
            "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
            "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
            "DefaultStyle" -> {
              Directive[
               Opacity[1.], 
               AbsoluteThickness[2], 
               RGBColor[1, 0, 0]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            Plot, "GroupHighlight" -> False|>|>]]& )[<|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{-1, 1}, {478.88212686336885`, 
             1674.7593356515013`}}, 
           "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0, 478.88212686336993`}, 
           "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
           "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
           "DefaultStyle" -> {
             Directive[
              Opacity[1.], 
              AbsoluteThickness[2], 
              RGBColor[1, 0, 0]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               (Identity[#]& )[
                Part[#, 1]], 
               (Identity[#]& )[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           Plot, "GroupHighlight" -> False|>|>],
       ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
        4.503599627370496*^15, -4.503599627370496*^15}}],
      Selectable->False]},
    Annotation[{{{{}, {}, 
        Annotation[{
          Directive[
           Opacity[1.], 
           AbsoluteThickness[2], 
           RGBColor[1, 0, 0]], 
          Line[CompressedData["
1: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
/f+++h9Yvl20
           "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
     "HighlightElements" -> <|
       "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
      "LayoutOptions" -> <|
       "PanelPlotLayout" -> <||>, 
        "PlotRange" -> {{-1, 1}, {478.88212686336885`, 1674.7593356515013`}}, 
        "Frame" -> {{False, False}, {False, False}}, 
        "AxesOrigin" -> {0, 478.88212686336993`}, 
        "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
        "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
          Directive[
           Opacity[1.], 
           AbsoluteThickness[2], 
           RGBColor[1, 0, 0]]}, 
        "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), 
          "ScalingFunctions" -> {{Identity, Identity}, {
            Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
      "Meta" -> <|
       "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
        Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox[
      TagBox[
      "\"PR15944 \\!\\(\\*SubscriptBox[\\(SIIS90\\), \\(y\\)]\\) [\[Mu]m]\"", 
       HoldForm], TraditionalForm], None}, {
     FormBox[
      TagBox["\"TCAV3 scaled amplitude\"", HoldForm], TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->800,
  LabelStyle->20,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.24, 0.6, 0.8], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.95, 0.627, 0.1425], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.455, 0.7, 0.21], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.578, 0.51, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.4, 0.64, 1.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[1., 0.75, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.8, 0.4, 0.76], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.637, 0.65, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05], 
    "OptimizePlotMarkers" -> True, "IncludeHighlighting" -> "CurrentPoint", 
    "HighlightStyle" -> Automatic, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1., 1.}, {0, 1923.3525743996488`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.957703806633312*^9, 3.9577038356473083`*^9}, {
   3.957703893038115*^9, 3.95770392280757*^9}, 3.9577040896225147`*^9, {
   3.95770419877216*^9, 3.95770425756812*^9}, {3.95770438710774*^9, 
   3.9577044040266438`*^9}, {3.957704458587816*^9, 3.95770448866547*^9}, 
   3.957705169194419*^9},
 CellLabel->
  "Out[2371]=",ExpressionUUID->"9990220f-e759-408f-bdea-8da347610681"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nlm", "[", "\"\<ParameterEstimates\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.95770384899128*^9, 3.95770385596516*^9}},
 CellLabel->
  "In[2372]:=",ExpressionUUID->"8fc52bc0-c136-4730-a8e0-82972abd83ca"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Parameter" -> $CellContext`\[Sigma]Off, "BestFitValue" -> 
        478.88206314775516`, "StandardError" -> 61.857583108786926`, 
        "TStatistic" -> 7.741687260971074, "PValue" -> 
        1.9643907286266346`*^-8, 
        "ConfidenceInterval" -> {352.17254813352304`, 605.5915781619873}|>, <|
       "Parameter" -> $CellContext`\[Sigma]z, "BestFitValue" -> 
        117.15285572263186`, "StandardError" -> 3.594272020990732, 
        "TStatistic" -> 32.594320919077134`, "PValue" -> 
        8.200119436463348*^-24, 
        "ConfidenceInterval" -> {109.79032324527961`, 124.5153881999841}|>}, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Parameter"} -> 
        1, {All, "BestFitValue"} -> 1, {All, "StandardError"} -> 
        1, {All, "TStatistic"} -> 1, {All, "PValue"} -> 
        1, {All, "ConfidenceInterval"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Parameter" -> TypeSystem`PackageScope`UnknownShape[False], 
            "BestFitValue" -> TypeSystem`PackageScope`AtomShape[60], 
            "StandardError" -> TypeSystem`PackageScope`AtomShape[60], 
            "TStatistic" -> TypeSystem`PackageScope`AtomShape[60], "PValue" -> 
            TypeSystem`PackageScope`AtomShape[60], "ConfidenceInterval" -> 
            TypeSystem`PackageScope`UnknownShape[False]|>], 
          DirectedInfinity[1], 6, {All}]], 2, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Parameter", "BestFitValue", "StandardError", "TStatistic", "PValue", 
         "ConfidenceInterval"}, {TypeSystem`AnyType, 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Vector[
          TypeSystem`Atom[Real], 2]}], 2], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Parameter"} -> 
        1, {All, "BestFitValue"} -> 1, {All, "StandardError"} -> 
        1, {All, "TStatistic"} -> 1, {All, "PValue"} -> 
        1, {All, "ConfidenceInterval"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Parameter" -> TypeSystem`PackageScope`UnknownShape[False], 
            "BestFitValue" -> TypeSystem`PackageScope`AtomShape[60], 
            "StandardError" -> TypeSystem`PackageScope`AtomShape[60], 
            "TStatistic" -> TypeSystem`PackageScope`AtomShape[60], "PValue" -> 
            TypeSystem`PackageScope`AtomShape[60], "ConfidenceInterval" -> 
            TypeSystem`PackageScope`UnknownShape[False]|>], 
          DirectedInfinity[1], 6, {All}]], 2, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Parameter", "BestFitValue", "StandardError", "TStatistic", "PValue", 
         "ConfidenceInterval"}, {TypeSystem`AnyType, 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Vector[
          TypeSystem`Atom[Real], 2]}], 2], "Path" -> {}, "DisplayedRowCount" -> 
     2, "DisplayedColumnCount" -> 6, "DataRowCount" -> 2, "DataColumnCount" -> 
     6, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Parameter", 
                  Style[
                  "Parameter", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Parameter"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Parameter"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["BestFitValue", 
                  Style[
                  "BestFitValue", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "BestFitValue"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "BestFitValue"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["StandardError", 
                  Style[
                  "StandardError", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "StandardError"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "StandardError"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TStatistic", 
                  Style[
                  "TStatistic", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "TStatistic"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "TStatistic"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["PValue", 
                  Style[
                  "PValue", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "PValue"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "PValue"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ConfidenceInterval", 
                  Style[
                  "ConfidenceInterval", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ConfidenceInterval"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ConfidenceInterval"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\[Sigma]Off", FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Parameter"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["478.882"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["BestFitValue"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["61.8576"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["StandardError"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["7.74169"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["TStatistic"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0000000196439"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["PValue"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{352.17254813352304`, 605.5915781619873}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{352.17254813352304`, 605.5915781619873}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["ConfidenceInterval"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ConfidenceInterval"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\[Sigma]z", FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Parameter"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["117.153"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["BestFitValue"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.59427"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["StandardError"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32.5943"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["TStatistic"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.00000000000000000000000820012"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["PValue"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{109.79032324527961`, 124.5153881999841}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{109.79032324527961`, 124.5153881999841}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                    Key["ConfidenceInterval"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ConfidenceInterval"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{651.976, {37.530792236328125`, 43.262725830078125`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{651.976, {37.530792236328125`, 43.262725830078125`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.9577038562489157`*^9, 3.9577039228698997`*^9, {3.9577042186571627`*^9, 
   3.9577042576302357`*^9}, {3.957704458642599*^9, 3.9577044887235003`*^9}, 
   3.957705169255987*^9},
 CellLabel->
  "Out[2372]=",ExpressionUUID->"1d7971ab-e1af-49c1-9f4c-afd778e07fa3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"fakeData", " ", "=", " ", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", " ", 
        RowBox[{
         RowBox[{"2.1", " ", "x"}], " ", "+", " ", 
         RowBox[{"0.5", 
          RowBox[{
           RowBox[{"RandomVariate", "[", 
            RowBox[{
             RowBox[{"NormalDistribution", "[", 
              RowBox[{"0", ",", "1"}], "]"}], ",", "1"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "1"}], ",", "1", ",", "0.01"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Randomize", " ", "order"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fakeData", "=", 
    RowBox[{"RandomSample", "[", "fakeData", "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", "fakeData", "]"}]}], "Input",
 CellChangeTimes->{{3.9577053953012333`*^9, 3.957705487237503*^9}},
 CellLabel->
  "In[2382]:=",ExpressionUUID->"5ecf1295-cab0-4c96-bc9e-162b98379eba"],

Cell[BoxData[
 GraphicsBox[{{}, 
   InterpretationBox[{
     TagBox[
      TagBox[
       {RGBColor[0.24, 0.6, 0.8], PointSize[0.009166666666666668], 
        AbsoluteThickness[2], PointBox[CompressedData["
1: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
qSM=
         "]]},
       Annotation[#, "Charting`Private`Tag#1"]& ],
      {"WolframDynamicHighlight", <|
       "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>}], 
     StyleBox[
      DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
        Slot["HighlightElements"], 
        Slot["LayoutOptions"], 
        Slot["Meta"], 
        Charting`HighlightActionFunction["DynamicHighlight", {{
           Annotation[{
             Directive[
              PointSize[0.009166666666666668], 
              RGBColor[0.24, 0.6, 0.8], 
              AbsoluteThickness[2]], 
             Point[CompressedData["
1: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
qSM=
              "]]}, "Charting`Private`Tag#1"]}}, <|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{-1., 1.}, {-3.020861616028384, 
             2.796054087710326}}, "Frame" -> {{False, False}, {False, False}},
             "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[0.009166666666666668], 
               RGBColor[0.24, 0.6, 0.8], 
               AbsoluteThickness[2]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (Identity[#]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListPlot, "GroupHighlight" -> False|>|>]]& )[<|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{-1., 1.}, {-3.020861616028384, 
            2.796054087710326}}, "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              PointSize[0.009166666666666668], 
              RGBColor[0.24, 0.6, 0.8], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               (Identity[#]& )[
                Part[#, 1]], 
               (Identity[#]& )[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           ListPlot, "GroupHighlight" -> False|>|>],
       ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
        4.503599627370496*^15, -4.503599627370496*^15}}],
      Selectable->False]},
    Annotation[{{
       Annotation[{
         Directive[
          PointSize[0.009166666666666668], 
          RGBColor[0.24, 0.6, 0.8], 
          AbsoluteThickness[2]], 
         Point[CompressedData["
1:eJw1VglYU9cSDoHgWlHBp6gFRRRBcK1rhYmFKr5X64qtCrjUIvIqoJWKYHFl
EUEt8hRceSpu4MLiggoTlqggIhAgoBFCgBCygYGENdJyz8n5vnz55t575sz5
559/ZvKOgHW/slksVuE/v4H/XT4DqwpKSqbMDnLVALGlcMzC2uWkXgOKtc+s
whX1WGnmtNLalsWThFg8WFFfBIHXvQpSrcrROnzgiyZMtj05pcBLhyxmtUHY
09Vp2QpjrvNQ4Y1AZzl6D1sU4rpBi15n8rTTPVuhzdRrlO8GE+7FxIHVgq6C
e0fP/6nHgbdn8vjI6XSZKc2X4V7GgQqP/fRFbi1n8XKsBg68CsvXrNt79Mst
HPA+VNiAd/yWdEXmatDBc+CAYkg3Hvne4aUC6pl4P6Dtk6o+/bkmnMcsBQ4X
HuLXndHjzYHtN0pxk6nbgr1BapzO7H+Jz+f4p9g6tiFjejZj7vzgRTl2XejO
OCyDkpr7fhU5YiDxVqL5ey1nzAUVMtcd2oodowo2vWjpxBXkezS2d7Sp+0GF
D5gHraAb75J919iYa88coMQT81Ld/39bj6ED4YZUQORhh5nHMjuB4FsJGf5P
jmwtrgbyXok5Va+WRn9rygtj7Jvgd2z944PLeED8NwP7z8gtkQt1EEzeo/BB
Y6WTtgYjmIR+hKFXbKz5W7SQxeApBfPz3isKfduBOS68Aaebq513evTTfMpg
3pqS0PREPQxj7tcMma+F6lFRX4Bxb6HGG38cCK6wNOYRuxbveCsnfX5l4EPw
0mceraKM/TX4DYN/A0Sn10xVd3yGd8UDqxEVZ1pM3PUdFN8W/OqdV3SqQy/q
mITI0PXFlMCHsz+jkuFjGTi3sdtDQ1XApC/wHb4+F7QuS/4eiT8lhsWLbI5V
GPPIfjEeir9r5rS9CQnf6qH6h7fz4vO7gPCxDuRL2zeNeKIHyieQv3UKWpmg
gbNMguXwYJkl7HHqgGcMXiXow7bdPOljD65jHlRjtPXaIrurSuq/BQ55ZAS7
9jQDya8I1wSdiDr+Dx6kfiTgOXhHw9OxRlzGDMnEulVXDuUI3tD8N8Jm7nVv
p5BOSGD8ZWHXDNXE0rBcyt8GtJvDd5G5a+j5MmgO9HkcYymj8dXiWV9lqUNl
PhB+i8Etzs9nv30P5ZMKJnxzI1Y8RAeRzHknwP3ACzdZmpjimwtqo/DeCYFp
kE/4DeZhhyWnrzcCeV8PbstvWRnN+ggkHgGyeLOKKrpjKf9fY/wueULz+iIk
fFKg38K5ohRFN63nT5DL9r2wp1xG+dqKw8uMMnaPZvPOELyxp1IbIbTopvsb
oPz8+LQCdjvNRzns6tkzdMFtDcVXCT/a/17m/RWbS+qxCafoIixNVF0UTyW4
u+3m6D17wIfoHcYYl2bpz0ooX0TI+8C5Ppl/kd5XhSPDhr11TGqn9xGira42
c/O+ZsrPetC5Hu/7Q6ACyk/oWoSX9zV2UL2R4IiUsWar3vbhEGb/U/wiWL5X
bVtlOA/iEqeNWH6mB6heopu9z0nvJX1I6ksIfkOXhj8fXoXpRO/wYJTPo4ht
zfCEsR/gd08SlH0NFVjNfC6AiDfX5kfGqoDoVzFuiBROND0vRlKPUiwtWp+5
IMiIR/UBRcrghWo3MRK8y3H6nHP++ZskSPgjxRihOz90q57WXzXemXMtJPxd
Ee4j9QauSZdf56vE0M+s97htc5p4Q5+U8qcF3iW3PNJcYnEZ+ibWoM/UohdP
OEY8wlcxJuf+ov1W3oEziN5C3KHD0SHRGTTfH9GxI2xi9NHPyLhb+waPL5G3
tGIdJDN85oEk9rbstEiBBG85btzGeni6sJ/qvwjyV7Ock017ab6lKF4dtZFT
pqH4voauzL8CJqpbwIVJsAT6cY4ra7IGSP0WwrjEs+6jAsqoPilh95SYnzLd
+yCIATQevbNcHttdfkP53ISp4dnHn87op/ip0cJ2ZNvPZ/uR9FM1PJoYYaxB
Y+4hUu/wouBjZaGDmPKlCAd7XF+SkZJM9bgEEpw8NlreK6X9TYBJU0+vi2kT
UP40wqpC7dkMm24abz0qTHImnx+ro/oqgO4/3DzaRlUCwb8Qx8XkLz5u0o2k
HFtQUPh40eLaXiR850Nqx2ijQV7PqF6Xgq5nW7aDczM8Z+LJAbvnbHu3rFKK
Xyt0HDG5tNbblEv0TA6CTAx0jGJzCZ4fQHP11UxvWyVQfcJHonseNUK9oZ+C
yak0r+lju2g/q0Ahb1XMol062h+FyH998u73ewVU7/Kx6lT2qT0BYqp3YhgL
sov9K5rgKYkPTV1400Yu4GMA0TMMWRsoKWZdpvVZDZ5FcdPmtTdSPZTh6JT9
VQsHdSPR3wK02cGxuuxXYKh/SJi03zZO203nn1xMinHI6CpKMug9BAdMHlI1
WgREH5ox4K7df9xn19N8KaB89vYAq0VsLp1fICph2z7w0YKc8ZeG0e7mO1M2
3THoI5zQ5j/3ddPCcKIXMOHqz/0bVpXDesJ/COHNTfg+oprGXwr/zs6rC99Z
SPlSC7896O8/sL0TSD1LUOqYmOZ8Uo9jSH+Ghan/7cw7bcIlthRu+jdw+F4c
Lu2PENOZNPOlqAGOEn7DjLkZytBSHtUnMaw0f/n44BadoZ9g1fpb99TSWiT5
lsPR1lcFfiV6IPOeBGOvXfRPHqWmfFTAnNnsgxzrNrhE+hn8WDU6736JlOJb
hr8lN7l2ZhbS/lkDR8xTL6Y/vE/vp4YFDnd8OZwv8JDwA3bqpfW/O/IN8SEv
I76j3rcDyTzwCb2tho1vOqUz9FN85erk9T6lDS8w/u+iX1rvwpbaeiT9oxGj
7PJ8RrixeNSGBcf/Wmayv5/OAwrkpmSGZTkM5pH7fUDLPQe0piwN3iB6hBYT
xcPCJwjwCvEPedN/cfzOTELjk2HylYb01Ie9hv6BtZtFM/7Vr6bzwAewMeX4
/8+rB0h9tGJU2sjYO8pBPCsy/2HorfivYYzGMG9DRknEJ9bTLqpvarT8GhcX
K7+givAL9hbFjcmezDfwHbbKllqzCvWU300w7qp1a9uMXsM8gFdeqi5zgtk8
wo9aSL86y9n/lJ7GU4dmta7FUwY14EvSf2Dar0ftzeIKDfoHwXAq0cJTDnR+
g028pLhlk9qB6F0BSKNk/OfzP1A+5MOGWtEs/vg22s8l8HDz+jEjt/XA3ywY
qSM=
          "]]}, "Charting`Private`Tag#1"]}}, <|
     "HighlightElements" -> <|
       "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
      "LayoutOptions" -> <|
       "PanelPlotLayout" -> <||>, 
        "PlotRange" -> {{-1., 1.}, {-3.020861616028384, 2.796054087710326}}, 
        "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
        "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
        "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
          Directive[
           PointSize[0.009166666666666668], 
           RGBColor[0.24, 0.6, 0.8], 
           AbsoluteThickness[2]]}, 
        "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), 
          "ScalingFunctions" -> {{Identity, Identity}, {
            Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
      "Meta" -> <|
       "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
        ListPlot, "GroupHighlight" -> False|>|>, 
     "DynamicHighlight"]], {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.24, 0.6, 0.8], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.95, 0.627, 0.1425], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.455, 0.7, 0.21], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.578, 0.51, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.4, 0.64, 1.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[1., 0.75, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.8, 0.4, 0.76], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.637, 0.65, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05], 
    "OptimizePlotMarkers" -> True, "IncludeHighlighting" -> "CurrentPoint", 
    "HighlightStyle" -> Automatic, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1., 1.}, {-3.020861616028384, 2.796054087710326}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.9577054522661057`*^9, 3.957705487790368*^9}},
 CellLabel->
  "Out[2384]=",ExpressionUUID->"842b6024-e5cd-46f6-9389-37975d101a4c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"nlm", " ", "=", " ", 
   RowBox[{"NonlinearModelFit", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"fakeData", "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", "20"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"m", " ", "x"}], " ", "+", " ", "b"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"m", ",", "b"}], "}"}], ",", "\[IndentingNewLine]", "x"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"nlm", "[", "\"\<ParameterEstimates\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.9577054907507143`*^9, 3.957705545888958*^9}},
 CellLabel->
  "In[2389]:=",ExpressionUUID->"b8186d44-8db5-4d71-9ba8-ff9b54c65dab"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Parameter" -> $CellContext`m, "BestFitValue" -> 2.2509854162077363`, 
        "StandardError" -> 0.15289082621866, "TStatistic" -> 
        14.722828516790424`, "PValue" -> 1.7604279645520733`*^-11, 
        "ConfidenceInterval" -> {1.9297737096542913`, 
         2.5721971227611813`}|>, <|
       "Parameter" -> $CellContext`b, 
        "BestFitValue" -> -0.055585812924815334`, "StandardError" -> 
        0.0940744596330734, "TStatistic" -> -0.5908703928953873, "PValue" -> 
        0.5619539703170168, 
        "ConfidenceInterval" -> {-0.25322891859170504`, 
         0.1420572927420744}|>}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Parameter"} -> 
        1, {All, "BestFitValue"} -> 1, {All, "StandardError"} -> 
        1, {All, "TStatistic"} -> 1, {All, "PValue"} -> 
        1, {All, "ConfidenceInterval"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Parameter" -> TypeSystem`PackageScope`UnknownShape[False], 
            "BestFitValue" -> TypeSystem`PackageScope`AtomShape[60], 
            "StandardError" -> TypeSystem`PackageScope`AtomShape[60], 
            "TStatistic" -> TypeSystem`PackageScope`AtomShape[60], "PValue" -> 
            TypeSystem`PackageScope`AtomShape[60], "ConfidenceInterval" -> 
            TypeSystem`PackageScope`UnknownShape[False]|>], 
          DirectedInfinity[1], 6, {All}]], 2, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Parameter", "BestFitValue", "StandardError", "TStatistic", "PValue", 
         "ConfidenceInterval"}, {TypeSystem`AnyType, 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Vector[
          TypeSystem`Atom[Real], 2]}], 2], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Parameter"} -> 
        1, {All, "BestFitValue"} -> 1, {All, "StandardError"} -> 
        1, {All, "TStatistic"} -> 1, {All, "PValue"} -> 
        1, {All, "ConfidenceInterval"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Parameter" -> TypeSystem`PackageScope`UnknownShape[False], 
            "BestFitValue" -> TypeSystem`PackageScope`AtomShape[60], 
            "StandardError" -> TypeSystem`PackageScope`AtomShape[60], 
            "TStatistic" -> TypeSystem`PackageScope`AtomShape[60], "PValue" -> 
            TypeSystem`PackageScope`AtomShape[60], "ConfidenceInterval" -> 
            TypeSystem`PackageScope`UnknownShape[False]|>], 
          DirectedInfinity[1], 6, {All}]], 2, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Parameter", "BestFitValue", "StandardError", "TStatistic", "PValue", 
         "ConfidenceInterval"}, {TypeSystem`AnyType, 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Vector[
          TypeSystem`Atom[Real], 2]}], 2], "Path" -> {}, "DisplayedRowCount" -> 
     2, "DisplayedColumnCount" -> 6, "DataRowCount" -> 2, "DataColumnCount" -> 
     6, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Parameter", 
                  Style[
                  "Parameter", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Parameter"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Parameter"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["BestFitValue", 
                  Style[
                  "BestFitValue", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "BestFitValue"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "BestFitValue"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["StandardError", 
                  Style[
                  "StandardError", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "StandardError"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "StandardError"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TStatistic", 
                  Style[
                  "TStatistic", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "TStatistic"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "TStatistic"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["PValue", 
                  Style[
                  "PValue", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "PValue"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "PValue"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ConfidenceInterval", 
                  Style[
                  "ConfidenceInterval", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ConfidenceInterval"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ConfidenceInterval"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["m", FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Parameter"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2.25099"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["BestFitValue"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.152891"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["StandardError"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["14.7228"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["TStatistic"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0000000000176043"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["PValue"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{1.9297737096542913`, 2.5721971227611813`}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{1.9297737096542913`, 2.5721971227611813`}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["ConfidenceInterval"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ConfidenceInterval"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["b", FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Parameter"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.0555858"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["BestFitValue"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0940745"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["StandardError"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.59087"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["TStatistic"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.561954"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["PValue"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{-0.25322891859170504`, 0.1420572927420744}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{-0.25322891859170504`, 0.1420572927420744}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                    Key["ConfidenceInterval"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ConfidenceInterval"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       578.1155017361111, {37.530792236328125`, 43.262725830078125`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      578.1155017361111, {37.530792236328125`, 43.262725830078125`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.957705515401849*^9, 3.957705546225177*^9}},
 CellLabel->
  "Out[2390]=",ExpressionUUID->"f4fb4b19-562b-455f-8900-9c0f9d20e46d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"nlm", " ", "=", " ", 
   RowBox[{"NonlinearModelFit", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"fakeData", "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", "50"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"m", " ", "x"}], " ", "+", " ", "b"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"m", ",", "b"}], "}"}], ",", "\[IndentingNewLine]", "x"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"nlm", "[", "\"\<ParameterEstimates\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.9577055518691463`*^9, 3.9577055524292088`*^9}},
 CellLabel->
  "In[2391]:=",ExpressionUUID->"30d555f5-59d7-486e-a864-e75c2d3d34f9"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Parameter" -> $CellContext`m, "BestFitValue" -> 2.3016127779291704`, 
        "StandardError" -> 0.09439531560994247, "TStatistic" -> 
        24.382701228944736`, "PValue" -> 1.085906138137343*^-28, 
        "ConfidenceInterval" -> {2.111818275406911, 2.49140728045143}|>, <|
       "Parameter" -> $CellContext`b, "BestFitValue" -> -0.006709340419876287,
         "StandardError" -> 0.05883002034832588, 
        "TStatistic" -> -0.11404620260457234`, "PValue" -> 0.9096768710092902,
         "ConfidenceInterval" -> {-0.12499502412396109`, 
         0.11157634328420853`}|>}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Parameter"} -> 
        1, {All, "BestFitValue"} -> 1, {All, "StandardError"} -> 
        1, {All, "TStatistic"} -> 1, {All, "PValue"} -> 
        1, {All, "ConfidenceInterval"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Parameter" -> TypeSystem`PackageScope`UnknownShape[False], 
            "BestFitValue" -> TypeSystem`PackageScope`AtomShape[60], 
            "StandardError" -> TypeSystem`PackageScope`AtomShape[60], 
            "TStatistic" -> TypeSystem`PackageScope`AtomShape[60], "PValue" -> 
            TypeSystem`PackageScope`AtomShape[60], "ConfidenceInterval" -> 
            TypeSystem`PackageScope`UnknownShape[False]|>], 
          DirectedInfinity[1], 6, {All}]], 2, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Parameter", "BestFitValue", "StandardError", "TStatistic", "PValue", 
         "ConfidenceInterval"}, {TypeSystem`AnyType, 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Vector[
          TypeSystem`Atom[Real], 2]}], 2], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Parameter"} -> 
        1, {All, "BestFitValue"} -> 1, {All, "StandardError"} -> 
        1, {All, "TStatistic"} -> 1, {All, "PValue"} -> 
        1, {All, "ConfidenceInterval"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Parameter" -> TypeSystem`PackageScope`UnknownShape[False], 
            "BestFitValue" -> TypeSystem`PackageScope`AtomShape[60], 
            "StandardError" -> TypeSystem`PackageScope`AtomShape[60], 
            "TStatistic" -> TypeSystem`PackageScope`AtomShape[60], "PValue" -> 
            TypeSystem`PackageScope`AtomShape[60], "ConfidenceInterval" -> 
            TypeSystem`PackageScope`UnknownShape[False]|>], 
          DirectedInfinity[1], 6, {All}]], 2, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Parameter", "BestFitValue", "StandardError", "TStatistic", "PValue", 
         "ConfidenceInterval"}, {TypeSystem`AnyType, 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Vector[
          TypeSystem`Atom[Real], 2]}], 2], "Path" -> {}, "DisplayedRowCount" -> 
     2, "DisplayedColumnCount" -> 6, "DataRowCount" -> 2, "DataColumnCount" -> 
     6, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Parameter", 
                  Style[
                  "Parameter", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Parameter"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Parameter"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["BestFitValue", 
                  Style[
                  "BestFitValue", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "BestFitValue"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "BestFitValue"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["StandardError", 
                  Style[
                  "StandardError", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "StandardError"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "StandardError"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TStatistic", 
                  Style[
                  "TStatistic", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "TStatistic"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "TStatistic"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["PValue", 
                  Style[
                  "PValue", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "PValue"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "PValue"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ConfidenceInterval", 
                  Style[
                  "ConfidenceInterval", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ConfidenceInterval"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ConfidenceInterval"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["m", FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Parameter"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2.30161"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["BestFitValue"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0943953"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["StandardError"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24.3827"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["TStatistic"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.000000000000000000000000000108591"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["PValue"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{2.111818275406911, 2.49140728045143}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{2.111818275406911, 2.49140728045143}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["ConfidenceInterval"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ConfidenceInterval"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["b", FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Parameter"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.00670934"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["BestFitValue"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.05883"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["StandardError"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.114046"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["TStatistic"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.909677"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["PValue"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{-0.12499502412396109`, 0.11157634328420853`}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{-0.12499502412396109`, 0.11157634328420853`}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                    Key["ConfidenceInterval"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ConfidenceInterval"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       697.753984375, {37.530792236328125`, 43.262725830078125`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      697.753984375, {37.530792236328125`, 43.262725830078125`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.957705552815179*^9},
 CellLabel->
  "Out[2392]=",ExpressionUUID->"4fa141d3-7ae5-45aa-b5d3-a2a8bfaf1a77"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"nlm", " ", "=", " ", 
   RowBox[{"NonlinearModelFit", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"fakeData", "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"m", " ", "x"}], " ", "+", " ", "b"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"m", ",", "b"}], "}"}], ",", "\[IndentingNewLine]", "x"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"nlm", "[", "\"\<ParameterEstimates\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.9577055565037193`*^9, 3.9577055575282593`*^9}},
 CellLabel->
  "In[2393]:=",ExpressionUUID->"3dc88987-f81d-4e52-b53b-4620452c94f7"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Parameter" -> $CellContext`m, "BestFitValue" -> 2.1016496839146024`, 
        "StandardError" -> 0.08288352854457298, "TStatistic" -> 
        25.356662787158974`, "PValue" -> 7.682265907681599*^-45, 
        "ConfidenceInterval" -> {1.9371700190030714`, 2.266129348826133}|>, <|
       "Parameter" -> $CellContext`b, 
        "BestFitValue" -> -0.012240215312991298`, "StandardError" -> 
        0.04954757648397857, "TStatistic" -> -0.24703963708394955`, "PValue" -> 
        0.8053943322830032, 
        "ConfidenceInterval" -> {-0.11056576829521723`, 
         0.08608533766923464}|>}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Parameter"} -> 
        1, {All, "BestFitValue"} -> 1, {All, "StandardError"} -> 
        1, {All, "TStatistic"} -> 1, {All, "PValue"} -> 
        1, {All, "ConfidenceInterval"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Parameter" -> TypeSystem`PackageScope`UnknownShape[False], 
            "BestFitValue" -> TypeSystem`PackageScope`AtomShape[60], 
            "StandardError" -> TypeSystem`PackageScope`AtomShape[60], 
            "TStatistic" -> TypeSystem`PackageScope`AtomShape[60], "PValue" -> 
            TypeSystem`PackageScope`AtomShape[60], "ConfidenceInterval" -> 
            TypeSystem`PackageScope`UnknownShape[False]|>], 
          DirectedInfinity[1], 6, {All}]], 2, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Parameter", "BestFitValue", "StandardError", "TStatistic", "PValue", 
         "ConfidenceInterval"}, {TypeSystem`AnyType, 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Vector[
          TypeSystem`Atom[Real], 2]}], 2], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Parameter"} -> 
        1, {All, "BestFitValue"} -> 1, {All, "StandardError"} -> 
        1, {All, "TStatistic"} -> 1, {All, "PValue"} -> 
        1, {All, "ConfidenceInterval"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Parameter" -> TypeSystem`PackageScope`UnknownShape[False], 
            "BestFitValue" -> TypeSystem`PackageScope`AtomShape[60], 
            "StandardError" -> TypeSystem`PackageScope`AtomShape[60], 
            "TStatistic" -> TypeSystem`PackageScope`AtomShape[60], "PValue" -> 
            TypeSystem`PackageScope`AtomShape[60], "ConfidenceInterval" -> 
            TypeSystem`PackageScope`UnknownShape[False]|>], 
          DirectedInfinity[1], 6, {All}]], 2, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Parameter", "BestFitValue", "StandardError", "TStatistic", "PValue", 
         "ConfidenceInterval"}, {TypeSystem`AnyType, 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Vector[
          TypeSystem`Atom[Real], 2]}], 2], "Path" -> {}, "DisplayedRowCount" -> 
     2, "DisplayedColumnCount" -> 6, "DataRowCount" -> 2, "DataColumnCount" -> 
     6, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Parameter", 
                  Style[
                  "Parameter", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Parameter"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Parameter"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["BestFitValue", 
                  Style[
                  "BestFitValue", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "BestFitValue"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "BestFitValue"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["StandardError", 
                  Style[
                  "StandardError", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "StandardError"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "StandardError"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TStatistic", 
                  Style[
                  "TStatistic", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "TStatistic"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "TStatistic"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["PValue", 
                  Style[
                  "PValue", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "PValue"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "PValue"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ConfidenceInterval", 
                  Style[
                  "ConfidenceInterval", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ConfidenceInterval"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ConfidenceInterval"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["m", FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Parameter"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2.10165"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["BestFitValue"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0828835"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["StandardError"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["25.3567"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["TStatistic"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
               "0.00000000000000000000000000000000000000000000768227"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["PValue"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{1.9371700190030714`, 2.266129348826133}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{1.9371700190030714`, 2.266129348826133}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["ConfidenceInterval"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ConfidenceInterval"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["b", FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Parameter"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.0122402"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["BestFitValue"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0495476"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["StandardError"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.24704"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["TStatistic"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.805394"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["PValue"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{-0.11056576829521723`, 0.08608533766923464}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{-0.11056576829521723`, 0.08608533766923464}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                    Key["ConfidenceInterval"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ConfidenceInterval"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       821.6455017361113, {37.530792236328125`, 43.262725830078125`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      821.6455017361113, {37.530792236328125`, 43.262725830078125`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9577055579268837`*^9},
 CellLabel->
  "Out[2394]=",ExpressionUUID->"05adce4c-005a-4dd0-a086-0eb2c7761a3a"]
}, Open  ]]
},
WindowSize->{1180, 1387},
WindowMargins->{{352, Automatic}, {Automatic, 0}},
FrontEndVersion->"14.2 for Mac OS X ARM (64-bit) (December 26, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6bcf1a4c-e365-42ff-a56c-c0fbf0b27fe8"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 878, 18, 151, "Input",ExpressionUUID->"5c28327a-b7e9-44d4-83e5-88843c3046cf"],
Cell[1457, 42, 846, 18, 48, "Output",ExpressionUUID->"f3f34146-1980-4a41-b103-2380cb27ad08"]
}, Open  ]],
Cell[2318, 63, 1713, 37, 744, "Input",ExpressionUUID->"4a3a60fb-72da-4c8f-ae61-1f421145749c"],
Cell[CellGroupData[{
Cell[4056, 104, 1289, 29, 155, "Input",ExpressionUUID->"f4076314-d383-4b9c-8f9e-8f726f3672ef"],
Cell[5348, 135, 4568, 97, 62, "Output",ExpressionUUID->"c6904844-8fad-4a5f-8bef-38ce1ad1b5b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9953, 237, 451, 12, 29, "Input",ExpressionUUID->"b2cbb7d1-a9d0-4732-b69e-0f590f6f799e"],
Cell[10407, 251, 833, 23, 47, "Output",ExpressionUUID->"db1cb8f7-b0d8-45ba-9e66-b56a9ec00237"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11277, 279, 1094, 25, 91, "Input",ExpressionUUID->"0d6f2a76-6ffb-4b46-996f-e20b589083a5"],
Cell[12374, 306, 31168, 624, 535, "Output",ExpressionUUID->"9990220f-e759-408f-bdea-8da347610681"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43579, 935, 229, 4, 29, "Input",ExpressionUUID->"8fc52bc0-c136-4730-a8e0-82972abd83ca"],
Cell[43811, 941, 41667, 765, 111, "Output",ExpressionUUID->"1d7971ab-e1af-49c1-9f4c-afd778e07fa3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[85515, 1711, 1183, 31, 151, "Input",ExpressionUUID->"5ecf1295-cab0-4c96-bc9e-162b98379eba"],
Cell[86701, 1744, 17720, 356, 253, "Output",ExpressionUUID->"842b6024-e5cd-46f6-9389-37975d101a4c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[104458, 2105, 742, 17, 151, "Input",ExpressionUUID->"b8186d44-8db5-4d71-9ba8-ff9b54c65dab"],
Cell[105203, 2124, 41540, 764, 111, "Output",ExpressionUUID->"f4fb4b19-562b-455f-8900-9c0f9d20e46d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146780, 2893, 744, 17, 151, "Input",ExpressionUUID->"30d555f5-59d7-486e-a864-e75c2d3d34f9"],
Cell[147527, 2912, 41501, 762, 111, "Output",ExpressionUUID->"4fa141d3-7ae5-45aa-b5d3-a2a8bfaf1a77"]
}, Open  ]],
Cell[CellGroupData[{
Cell[189065, 3679, 745, 17, 151, "Input",ExpressionUUID->"3dc88987-f81d-4e52-b53b-4620452c94f7"],
Cell[189813, 3698, 41560, 764, 111, "Output",ExpressionUUID->"05adce4c-005a-4dd0-a086-0eb2c7761a3a"]
}, Open  ]]
}
]
*)

